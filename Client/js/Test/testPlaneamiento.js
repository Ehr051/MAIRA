/**
 * SCRIPT DE VERIFICACI√ìN COMPLETA - M√ìDULO PLANEAMIENTO
 * Verifica todas las funcionalidades del m√≥dulo de planeamiento
 * @version 1.0.0
 */

class TestPlaneamiento {
    constructor() {
        this.resultados = {};
        this.errores = [];
        this.timeouts = [];
        this.testActual = '';
    }

    /**
     * Ejecuta todos los tests del m√≥dulo de planeamiento
     */
    async ejecutarTodosLosTests() {
        console.log('üß™ INICIANDO VERIFICACI√ìN COMPLETA DEL M√ìDULO PLANEAMIENTO');
        console.log('‚ïê'.repeat(60));
        
        const tests = [
            'verificarInicializacion',
            'verificarMapa',
            'verificarBusquedaLugares',
            'verificarHerramientasBasicas',
            'verificarMedicionDistancia',
            'verificarPerfilElevacion',
            'verificarCalculoMarcha',
            'verificarPuntosControl',
            'verificarSimbolos',
            'verificarCalcos',
            'verificarExportacion',
            'verificarIntegracionCompleta'
        ];

        let pasados = 0;
        let fallados = 0;

        for (const test of tests) {
            try {
                this.testActual = test;
                const resultado = await this[test]();
                this.resultados[test] = resultado;
                
                if (resultado.exito) {
                    pasados++;
                    console.log(`‚úÖ ${test}: ${resultado.mensaje}`);
                } else {
                    fallados++;
                    console.log(`‚ùå ${test}: ${resultado.mensaje}`);
                    this.errores.push(`${test}: ${resultado.mensaje}`);
                }
            } catch (error) {
                fallados++;
                console.error(`üí• ${test} FALL√ì CON ERROR:`, error);
                this.errores.push(`${test}: ${error.message}`);
            }
        }

        this.mostrarResumenFinal(pasados, fallados);
        return { pasados, fallados, errores: this.errores };
    }

    /**
     * Test 1: Verificar inicializaci√≥n del m√≥dulo
     */
    async verificarInicializacion() {
        const checks = {
            'DOM cargado': !!document.querySelector('body'),
            'Mapa inicializado': !!window.mapa,
            'Leaflet disponible': typeof L !== 'undefined',
            'D3 disponible': typeof d3 !== 'undefined',
            'milsymbol disponible': typeof window.ms !== 'undefined',
            'MAIRA namespace': !!(window.MAIRA || window.elevationHandler),
            'Variables globales': !!(window.lineas && window.elementoSeleccionado !== undefined)
        };

        const fallidas = Object.entries(checks).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            return { exito: true, mensaje: 'Inicializaci√≥n completa ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Fallas en inicializaci√≥n: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 2: Verificar funcionamiento del mapa
     */
    async verificarMapa() {
        if (!window.mapa) {
            return { exito: false, mensaje: 'Mapa no inicializado' };
        }

        const checks = {
            'Mapa renderizado': !!window.mapa._container,
            'Centro configurado': !!window.mapa.getCenter(),
            'Zoom configurado': window.mapa.getZoom() > 0,
            'Capas base': Object.keys(window.mapa._layers).length > 0,
            'Controles activos': !!document.querySelector('.leaflet-control')
        };

        const fallidas = Object.entries(checks).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            return { exito: true, mensaje: 'Mapa funcionando correctamente ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Problemas en mapa: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 3: Verificar b√∫squeda de lugares
     */
    async verificarBusquedaLugares() {
        const elementos = {
            'Input b√∫squeda': document.getElementById('busquedaLugar'),
            'Bot√≥n b√∫squeda': document.getElementById('btnBuscarLugar'),
            'Resultados': document.getElementById('resultadosBusquedaLugar'),
            'Geocoder disponible': typeof L.Control.Geocoder !== 'undefined'
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            // Test funcional b√°sico
            try {
                const input = elementos['Input b√∫squeda'];
                input.value = 'Buenos Aires';
                input.dispatchEvent(new Event('input'));
                
                return { exito: true, mensaje: 'B√∫squeda de lugares operativa ‚úì' };
            } catch (error) {
                return { exito: false, mensaje: `Error en b√∫squeda: ${error.message}` };
            }
        } else {
            return { 
                exito: false, 
                mensaje: `Elementos faltantes: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 4: Verificar herramientas b√°sicas
     */
    async verificarHerramientasBasicas() {
        const herramientas = {
            'Funci√≥n medirDistancia': typeof window.medirDistancia === 'function',
            'Funci√≥n seleccionarElemento': typeof window.seleccionarElemento === 'function',
            'Funci√≥n deseleccionarElemento': typeof window.deseleccionarElemento === 'function',
            'Men√∫ herramientas': !!document.getElementById('herramientas-menu'),
            'Panel edici√≥n': !!(document.getElementById('panelEdicionLinea') || document.querySelector('.panel'))
        };

        const fallidas = Object.entries(herramientas).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            return { exito: true, mensaje: 'Herramientas b√°sicas disponibles ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Herramientas faltantes: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 5: Verificar medici√≥n de distancia
     */
    async verificarMedicionDistancia() {
        if (typeof window.medirDistancia !== 'function') {
            return { exito: false, mensaje: 'Funci√≥n medirDistancia no disponible' };
        }

        try {
            // Simular inicio de medici√≥n
            window.medirDistancia();
            
            // Verificar que se ha iniciado correctamente
            const checks = {
                'L√≠neas de medici√≥n inicializadas': !!(window.lineas || window.measuringDistance !== undefined),
                'Modo medici√≥n activo': window.measuringDistance === true || window.medicionDistancia === true,
                'Click handler configurado': !!window.mapa._events.click
            };

            const fallidas = Object.entries(checks).filter(([key, value]) => !value);
            
            if (fallidas.length === 0) {
                return { exito: true, mensaje: 'Medici√≥n de distancia funcional ‚úì' };
            } else {
                return { 
                    exito: false, 
                    mensaje: `Problemas en medici√≥n: ${fallidas.map(([k]) => k).join(', ')}` 
                };
            }
        } catch (error) {
            return { exito: false, mensaje: `Error en medici√≥n: ${error.message}` };
        }
    }

    /**
     * Test 6: Verificar perfil de elevaci√≥n
     */
    async verificarPerfilElevacion() {
        const elementos = {
            'MAIRA.Elevacion': !!(window.MAIRA?.Elevacion || window.elevationHandler),
            'elevationHandler': !!window.elevationHandler,
            'Funci√≥n renderizarGraficoElevacion': typeof window.renderizarGraficoElevacion === 'function',
            'D3 para gr√°ficos': typeof d3 !== 'undefined',
            'Datos de elevaci√≥n': !!(window.elevationHandler?.cargarDatosElevacion || window.elevationHandler?.indiceTiles)
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            return { exito: true, mensaje: 'Sistema de elevaci√≥n disponible ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Elementos de elevaci√≥n faltantes: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 7: Verificar c√°lculo de marcha
     */
    async verificarCalculoMarcha() {
        const elementos = {
            'CalculoMarcha clase': typeof window.CalculoMarchaController === 'function',
            'Panel marcha': !!document.getElementById('calculoMarchaPanel'),
            'Bot√≥n calcular': !!document.getElementById('btnCalcularMarcha'),
            'MAIRA.Vegetacion': !!window.MAIRA?.Vegetacion,
            'graficoMarcha': typeof window.GraficoMarchaController === 'function'
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length === 0) {
            // Test b√°sico de instanciaci√≥n
            try {
                const calculoMarcha = new window.CalculoMarchaController();
                return { exito: true, mensaje: 'Sistema de c√°lculo de marcha operativo ‚úì' };
            } catch (error) {
                return { exito: false, mensaje: `Error en c√°lculo marcha: ${error.message}` };
            }
        } else {
            return { 
                exito: false, 
                mensaje: `Elementos de marcha faltantes: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 8: Verificar puntos de control
     */
    async verificarPuntosControl() {
        const elementos = {
            'Funci√≥n agregar PC': typeof window.agregarPuntoControl === 'function',
            'Enlaces PC en men√∫': !!document.querySelector('a[onclick*="agregarPuntoControl"]'),
            'milsymbol cargado': typeof window.ms !== 'undefined'
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length <= 1) { // Permitir 1 falla menor
            return { exito: true, mensaje: 'Sistema de puntos de control disponible ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Problemas en PC: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 9: Verificar s√≠mbolos militares
     */
    async verificarSimbolos() {
        const elementos = {
            'milsymbol disponible': typeof window.ms !== 'undefined',
            'simbolosP cargado': !!document.querySelector('script[src*="simbolosP.js"]'),
            'Panel s√≠mbolos': !!document.getElementById('simbolosBasicosBtn')
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length <= 1) {
            return { exito: true, mensaje: 'Sistema de s√≠mbolos disponible ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Problemas en s√≠mbolos: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 10: Verificar calcos
     */
    async verificarCalcos() {
        const elementos = {
            'calcosP disponible': !!window.calcosP,
            'Funciones de calco': typeof window.editarElementoSeleccionado === 'function',
            'Panel calcos': !!document.querySelector('.panel-calcos, #calcos-menu')
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length <= 1) {
            return { exito: true, mensaje: 'Sistema de calcos disponible ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Problemas en calcos: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 11: Verificar exportaci√≥n
     */
    async verificarExportacion() {
        const elementos = {
            'jsPDF disponible': !!(window.jspdf || window.jsPDF),
            'html2canvas disponible': typeof window.html2canvas !== 'undefined',
            'Scripts exportaci√≥n': !!(document.querySelector('script[src*="jspdf"]') && document.querySelector('script[src*="html2canvas"]'))
        };

        const fallidas = Object.entries(elementos).filter(([key, value]) => !value);
        
        if (fallidas.length <= 1) {
            return { exito: true, mensaje: 'Capacidades de exportaci√≥n disponibles ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Problemas en exportaci√≥n: ${fallidas.map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Test 12: Verificar integraci√≥n completa
     */
    async verificarIntegracionCompleta() {
        const flujos = {
            'Crear l√≠nea ‚Üí Perfil elevaci√≥n': this.testFlujoPerfilElevacion(),
            'Crear l√≠nea ‚Üí C√°lculo marcha': this.testFlujoCalculoMarcha(),
            'Agregar PC ‚Üí Visualizaci√≥n': this.testFlujoPuntosControl()
        };

        let exitosos = 0;
        const resultados = {};

        for (const [flujo, test] of Object.entries(flujos)) {
            try {
                const resultado = await test;
                resultados[flujo] = resultado;
                if (resultado) exitosos++;
            } catch (error) {
                resultados[flujo] = false;
            }
        }

        if (exitosos >= 2) {
            return { exito: true, mensaje: 'Integraci√≥n entre m√≥dulos funcional ‚úì' };
        } else {
            return { 
                exito: false, 
                mensaje: `Fallos en integraci√≥n: ${Object.entries(resultados).filter(([k,v]) => !v).map(([k]) => k).join(', ')}` 
            };
        }
    }

    /**
     * Tests auxiliares para integraci√≥n
     */
    testFlujoPerfilElevacion() {
        return !!(
            window.lineas && 
            typeof window.renderizarGraficoElevacion === 'function' &&
            window.elevationHandler
        );
    }

    testFlujoCalculoMarcha() {
        return !!(
            window.CalculoMarchaController && 
            window.GraficoMarchaController &&
            (window.MAIRA?.Vegetacion || window.vegetacionHandler)
        );
    }

    testFlujoPuntosControl() {
        return !!(
            typeof window.agregarPuntoControl === 'function' &&
            typeof window.ms !== 'undefined'
        );
    }

    /**
     * Muestra el resumen final de todos los tests
     */
    mostrarResumenFinal(pasados, fallados) {
        console.log('\n' + '‚ïê'.repeat(60));
        console.log('üìä RESUMEN FINAL DE VERIFICACI√ìN');
        console.log('‚ïê'.repeat(60));
        console.log(`‚úÖ Tests pasados: ${pasados}`);
        console.log(`‚ùå Tests fallados: ${fallados}`);
        console.log(`üìà Porcentaje de √©xito: ${((pasados / (pasados + fallados)) * 100).toFixed(1)}%`);
        
        if (this.errores.length > 0) {
            console.log('\nüîç ERRORES ENCONTRADOS:');
            this.errores.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        console.log('\nüéØ RECOMENDACIONES:');
        if (pasados >= 10) {
            console.log('‚úÖ M√≥dulo de planeamiento en excelente estado');
        } else if (pasados >= 8) {
            console.log('‚ö†Ô∏è  M√≥dulo funcional con algunos problemas menores');
        } else if (pasados >= 6) {
            console.log('üîß M√≥dulo necesita correcciones importantes');
        } else {
            console.log('üí• M√≥dulo requiere revisi√≥n completa');
        }
        
        console.log('‚ïê'.repeat(60));
    }

    /**
     * Ejecuta un test r√°pido (versi√≥n reducida)
     */
    async testRapido() {
        console.log('üöÄ EJECUTANDO TEST R√ÅPIDO DE PLANEAMIENTO...');
        
        const testsBasicos = [
            'verificarInicializacion',
            'verificarMapa',
            'verificarHerramientasBasicas',
            'verificarPerfilElevacion',
            'verificarCalculoMarcha'
        ];

        let exitosos = 0;
        for (const test of testsBasicos) {
            try {
                const resultado = await this[test]();
                if (resultado.exito) {
                    exitosos++;
                    console.log(`‚úÖ ${test}`);
                } else {
                    console.log(`‚ùå ${test}: ${resultado.mensaje}`);
                }
            } catch (error) {
                console.log(`üí• ${test}: ${error.message}`);
            }
        }

        console.log(`\nüìä RESULTADO: ${exitosos}/${testsBasicos.length} tests b√°sicos pasados`);
        return exitosos >= 4;
    }
}

// Hacer disponible globalmente
window.TestPlaneamiento = TestPlaneamiento;

// Auto-ejecutar si se llama directamente
if (typeof window !== 'undefined' && window.location) {
    window.ejecutarTestPlaneamiento = async function(rapido = false) {
        const test = new TestPlaneamiento();
        return rapido ? await test.testRapido() : await test.ejecutarTodosLosTests();
    };
}

console.log('üß™ TestPlaneamiento cargado. Ejecuta: ejecutarTestPlaneamiento() o ejecutarTestPlaneamiento(true)');
