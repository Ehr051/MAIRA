/**
 * Integraci√≥n de Mini-tiles con MAIRA v3.0
 * Actualizaci√≥n del sistema de elevaci√≥n para usar tiles-v3.0
 */

// Actualizar la funci√≥n existente de elevaci√≥n en app.py o el archivo JS principal
const MairaElevationIntegration = {
    
    /**
     * Inicializar el sistema de mini-tiles
     */
    async init() {
        try {
            console.log('üîß Inicializando sistema de mini-tiles v3.0...');
            
            // Cargar el script del loader si no est√° disponible
            if (!window.miniTilesLoader) {
                await this.loadMiniTilesScript();
            }
            
            // Inicializar el loader
            await window.miniTilesLoader.initialize();
            
            console.log('‚úÖ Sistema de mini-tiles inicializado exitosamente');
            
            // Mostrar estad√≠sticas
            const stats = window.miniTilesLoader.getStats();
            console.log('üìä Estad√≠sticas mini-tiles:', stats);
            
            return true;
        } catch (error) {
            console.error('‚ùå Error inicializando mini-tiles:', error);
            return false;
        }
    },

    /**
     * Cargar el script del loader din√°micamente
     */
    loadMiniTilesScript() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = './mini_tiles_loader.js';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    },

    /**
     * Obtener elevaci√≥n para coordenadas espec√≠ficas
     * Reemplaza la funci√≥n original que usaba tiles grandes
     */
    async getElevation(lat, lon) {
        try {
            const tile = await window.miniTilesLoader.getTile(lat, lon, 'altimetria');
            
            if (!tile) {
                console.warn(`‚ö†Ô∏è No se encontr√≥ tile de elevaci√≥n para ${lat}, ${lon}`);
                return null;
            }

            // Aqu√≠ necesitar√≠as procesar el archivo TIF del tile
            // Por ahora retornamos informaci√≥n del tile encontrado
            return {
                elevation: null, // Procesar TIF para obtener valor exacto
                tileInfo: tile,
                success: true
            };
            
        } catch (error) {
            console.error('‚ùå Error obteniendo elevaci√≥n:', error);
            return { elevation: null, success: false, error };
        }
    },

    /**
     * Pre-cargar tiles para el √°rea visible del mapa
     */
    async preloadMapArea(map) {
        if (!map) return;
        
        const bounds = map.getBounds();
        const mapBounds = {
            north: bounds.getNorth(),
            south: bounds.getSouth(),
            east: bounds.getEast(),
            west: bounds.getWest()
        };

        console.log('üó∫Ô∏è Pre-cargando tiles para √°rea del mapa...');
        
        try {
            const loadedCount = await window.miniTilesLoader.preloadRegion(mapBounds);
            console.log(`‚úÖ Pre-carga completada: ${loadedCount} tiles`);
            return loadedCount;
        } catch (error) {
            console.error('‚ùå Error en pre-carga:', error);
            return 0;
        }
    },

    /**
     * Actualizar funci√≥n de click en mapa para usar mini-tiles
     */
    async handleMapClick(lat, lon) {
        console.log(`üéØ Click en mapa: ${lat.toFixed(4)}, ${lon.toFixed(4)}`);
        
        // Mostrar indicador de carga
        this.showLoadingIndicator();
        
        try {
            // Obtener informaci√≥n de elevaci√≥n
            const elevationResult = await this.getElevation(lat, lon);
            
            if (elevationResult.success) {
                console.log('‚úÖ Tile encontrado:', elevationResult.tileInfo);
                
                // Actualizar UI con informaci√≥n del tile
                this.updateElevationDisplay(elevationResult);
                
                // Mostrar informaci√≥n detallada en consola
                console.log('üìä Informaci√≥n del tile:', {
                    id: elevationResult.tileInfo.id,
                    provincia: elevationResult.tileInfo.provincia,
                    bounds: elevationResult.tileInfo.bounds
                });
                
            } else {
                console.warn('‚ö†Ô∏è No se pudo obtener elevaci√≥n para esta ubicaci√≥n');
                this.showNoDataMessage();
            }
            
        } catch (error) {
            console.error('‚ùå Error procesando click:', error);
            this.showErrorMessage(error);
        } finally {
            this.hideLoadingIndicator();
        }
    },

    /**
     * Mostrar indicador de carga
     */
    showLoadingIndicator() {
        // Implementar indicador visual de carga
        console.log('‚è≥ Cargando tile...');
    },

    /**
     * Ocultar indicador de carga
     */
    hideLoadingIndicator() {
        console.log('‚úÖ Carga completada');
    },

    /**
     * Actualizar display de elevaci√≥n
     */
    updateElevationDisplay(elevationResult) {
        const tileInfo = elevationResult.tileInfo;
        
        // Actualizar elementos UI existentes
        const infoElement = document.getElementById('elevation-info');
        if (infoElement) {
            infoElement.innerHTML = `
                <div class="tile-info">
                    <h3>üó∫Ô∏è Informaci√≥n del Tile</h3>
                    <p><strong>ID:</strong> ${tileInfo.id}</p>
                    <p><strong>Provincia:</strong> ${tileInfo.provincia}</p>
                    <p><strong>Archivo:</strong> ${tileInfo.filename}</p>
                    <p><strong>Sistema:</strong> Mini-tiles v3.0</p>
                </div>
            `;
        }

        console.log('üìä Display de elevaci√≥n actualizado');
    },

    /**
     * Mostrar mensaje de no datos
     */
    showNoDataMessage() {
        const infoElement = document.getElementById('elevation-info');
        if (infoElement) {
            infoElement.innerHTML = `
                <div class="no-data">
                    <p>‚ö†Ô∏è No hay datos de elevaci√≥n disponibles para esta ubicaci√≥n</p>
                </div>
            `;
        }
    },

    /**
     * Mostrar mensaje de error
     */
    showErrorMessage(error) {
        const infoElement = document.getElementById('elevation-info');
        if (infoElement) {
            infoElement.innerHTML = `
                <div class="error">
                    <p>‚ùå Error cargando datos: ${error.message}</p>
                </div>
            `;
        }
    },

    /**
     * Obtener estad√≠sticas del sistema
     */
    getSystemStats() {
        if (!window.miniTilesLoader) {
            return { error: 'Mini-tiles loader no disponible' };
        }

        return window.miniTilesLoader.getStats();
    },

    /**
     * Limpiar cache de tiles
     */
    clearCache() {
        if (window.miniTilesLoader) {
            window.miniTilesLoader.clearCache();
            console.log('üßπ Cache de mini-tiles limpiada');
        }
    }
};

// Inicializar autom√°ticamente cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Inicializando integraci√≥n MAIRA con mini-tiles v3.0...');
    
    try {
        const success = await MairaElevationIntegration.init();
        if (success) {
            console.log('‚úÖ MAIRA mini-tiles v3.0 listo para usar');
            
            // Exponer funciones globalmente para depuraci√≥n
            window.mairaElevation = MairaElevationIntegration;
            
        } else {
            console.error('‚ùå Error inicializando MAIRA mini-tiles');
        }
    } catch (error) {
        console.error('‚ùå Error fatal inicializando mini-tiles:', error);
    }
});

// Export para m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MairaElevationIntegration;
}
