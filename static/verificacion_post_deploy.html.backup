<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úÖ Verificaci√≥n Post-Deploy MAIRA</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            color: #ffffff;
            padding: 20px;
            margin: 0;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(0,0,0,0.7);
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #00ff00;
            padding-bottom: 20px;
        }
        .test-section {
            background: rgba(0,30,0,0.8);
            border: 1px solid #00ff00;
            margin: 20px 0;
            padding: 20px;
            border-radius: 8px;
        }
        .status-ok { color: #00ff00; font-weight: bold; }
        .status-error { color: #ff4444; font-weight: bold; }
        .status-warning { color: #ffaa00; font-weight: bold; }
        .status-pending { color: #0088ff; font-weight: bold; }
        .log {
            background: #000;
            border: 1px solid #333;
            padding: 15px;
            margin: 15px 0;
            height: 300px;
            overflow-y: auto;
            font-size: 13px;
            border-radius: 5px;
        }
        button {
            background: linear-gradient(45deg, #00ff00, #00aa00);
            color: #000;
            border: none;
            padding: 12px 25px;
            margin: 10px;
            cursor: pointer;
            border-radius: 5px;
            font-weight: bold;
            font-size: 14px;
            transition: all 0.3s;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,255,0,0.4);
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #00ff00, #00aa00);
            width: 0%;
            transition: width 0.5s ease;
        }
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        .metric {
            background: rgba(0,50,0,0.6);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #00ff00;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .loading {
            animation: pulse 1s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ MAIRA - Verificaci√≥n Post-Deploy</h1>
            <p>Verificaci√≥n autom√°tica de la correcci√≥n de errores 502</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progressBar"></div>
            </div>
            <div id="overallStatus" class="status-pending">üîÑ Verificando sistema...</div>
        </div>

        <div class="grid">
            <div class="metric">
                <div class="metric-value" id="filesOK">0</div>
                <div>Archivos OK</div>
            </div>
            <div class="metric">
                <div class="metric-value" id="tilesAvailable">0</div>
                <div>Tiles Geogr√°ficos</div>
            </div>
        </div>

        <div class="test-section">
            <h3>üîç Test de Archivos Cr√≠ticos</h3>
            <div id="criticalFiles"></div>
            <button onclick="testCriticalFiles()">üîÑ Re-verificar Archivos</button>
        </div>

        <div class="test-section">
            <h3>üó∫Ô∏è Test de Datos Geogr√°ficos</h3>
            <div id="geoData"></div>
            <button onclick="testGeoData()">üîÑ Re-verificar Datos</button>
        </div>

        <div class="test-section">
            <h3>üéÆ Test Funcional</h3>
            <div id="functionalTests"></div>
            <button onclick="testFunctionality()">üîÑ Test Funcional</button>
        </div>

        <div class="test-section">
            <h3>üìä Log de Verificaci√≥n</h3>
            <div id="verificationLog" class="log"></div>
            <button onclick="clearLog()">üßπ Limpiar Log</button>
            <button onclick="downloadReport()">üìÅ Descargar Reporte</button>
        </div>

        <div class="test-section">
            <h3>üöÄ Acciones R√°pidas</h3>
            <button onclick="openPlaneamiento()">üìã Abrir Planeamiento</button>
            <button onclick="openJuegoGuerra()">‚öîÔ∏è Abrir Juego de Guerra</button>
            <button onclick="openDiagnostico()">ü©∫ Abrir Diagn√≥stico</button>
            <button onclick="runFullAudit()">üîç Auditor√≠a Completa</button>
        </div>
    </div>

    <script>
        let logContent = '';
        let testsCompleted = 0;
        let totalTests = 3;

        function log(message, level = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const icons = { info: '‚ÑπÔ∏è', success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è' };
            const icon = icons[level] || '‚ÑπÔ∏è';
            
            const logEntry = `[${timestamp}] ${icon} ${message}\n`;
            logContent += logEntry;
            
            const logElement = document.getElementById('verificationLog');
            logElement.textContent = logContent;
            logElement.scrollTop = logElement.scrollHeight;
            
            console.log(`[VERIFICACI√ìN] ${message}`);
        }

        function updateProgress() {
            const percentage = (testsCompleted / totalTests) * 100;
            document.getElementById('progressBar').style.width = percentage + '%';
            
            if (percentage === 100) {
                document.getElementById('overallStatus').innerHTML = '‚úÖ Verificaci√≥n Completa';
                document.getElementById('overallStatus').className = 'status-ok';
            }
        }

        async function testCriticalFiles() {
            log('Iniciando test de archivos cr√≠ticos...', 'info');
            
            const criticalFiles = [
                '/Client/js/networkConfig.js',
                '/Client/js/elevationHandler.js',
                '/Client/js/vegetacionhandler.js',
                '/Client/js/elevation.worker.js',
                '/Client/js/indexP.js',
                '/Client/js/miradial.js',
                '/Client/js/graficoMarcha.js',
                '/Client/js/panelMarcha.js',
                '/Client/js/calcosP.js'
            ];

            const resultContainer = document.getElementById('criticalFiles');
            resultContainer.innerHTML = '<div class="loading">üîÑ Verificando archivos...</div>';

            let filesOK = 0;
            let results = '';

            for (const file of criticalFiles) {
                try {
                    const response = await fetch(file, { method: 'HEAD' });
                    if (response.ok) {
                        results += `<div class="status-ok">‚úÖ ${file}</div>`;
                        filesOK++;
                        log(`Archivo OK: ${file}`, 'success');
                    } else {
                        results += `<div class="status-error">‚ùå ${file} (${response.status})</div>`;
                        log(`Archivo ERROR: ${file} - ${response.status}`, 'error');
                    }
                } catch (error) {
                    results += `<div class="status-error">‚ùå ${file} (Error de red)</div>`;
                    log(`Archivo ERROR: ${file} - ${error.message}`, 'error');
                }
            }

            resultContainer.innerHTML = results;
            document.getElementById('filesOK').textContent = `${filesOK}/${criticalFiles.length}`;
            
            testsCompleted = Math.max(testsCompleted, 1);
            updateProgress();
            
            log(`Test de archivos completado: ${filesOK}/${criticalFiles.length} OK`, 
                filesOK === criticalFiles.length ? 'success' : 'warning');
        }

        async function testGeoData() {
            log('Iniciando test de datos geogr√°ficos...', 'info');
            
            const geoFiles = [
                '/Client/Libs/datos_argentina/Altimetria/index_tiles_altimetria.json',
                '/Client/Libs/datos_argentina/Vegetacion/vegetacion_tile_index.json'
            ];

            const resultContainer = document.getElementById('geoData');
            resultContainer.innerHTML = '<div class="loading">üîÑ Verificando datos geogr√°ficos...</div>';

            let totalTiles = 0;
            let results = '';

            for (const file of geoFiles) {
                try {
                    const response = await fetch(file);
                    if (response.ok) {
                        const data = await response.json();
                        const numTiles = Object.keys(data.tiles || {}).length;
                        totalTiles += numTiles;
                        
                        const type = file.includes('Altimetria') ? 'Altimetr√≠a' : 'Vegetaci√≥n';
                        results += `<div class="status-ok">‚úÖ ${type}: ${numTiles} tiles</div>`;
                        log(`${type}: ${numTiles} tiles disponibles`, 'success');
                    } else {
                        results += `<div class="status-error">‚ùå ${file} (${response.status})</div>`;
                        log(`Error en √≠ndice: ${file} - ${response.status}`, 'error');
                    }
                } catch (error) {
                    results += `<div class="status-error">‚ùå ${file} (Error)</div>`;
                    log(`Error en √≠ndice: ${file} - ${error.message}`, 'error');
                }
            }

            resultContainer.innerHTML = results;
            document.getElementById('tilesAvailable').textContent = totalTiles;
            
            testsCompleted = Math.max(testsCompleted, 2);
            updateProgress();
            
            log(`Test de datos geogr√°ficos completado: ${totalTiles} tiles disponibles`, 'success');
        }

        async function testFunctionality() {
            log('Iniciando test funcional...', 'info');
            
            const resultContainer = document.getElementById('functionalTests');
            resultContainer.innerHTML = '<div class="loading">üîÑ Verificando funcionalidad...</div>';

            let results = '';
            let functionsOK = 0;
            let totalFunctions = 0;

            // Test NetworkConfig
            totalFunctions++;
            if (typeof window.SERVER_URL !== 'undefined' && typeof window.CLIENT_URL !== 'undefined') {
                results += `<div class="status-ok">‚úÖ NetworkConfig: URLs configuradas</div>`;
                functionsOK++;
                log('NetworkConfig: Variables globales OK', 'success');
            } else {
                results += `<div class="status-error">‚ùå NetworkConfig: Variables no definidas</div>`;
                log('NetworkConfig: Variables globales FALTANTES', 'error');
            }

            // Test Leaflet
            totalFunctions++;
            if (typeof L !== 'undefined') {
                results += `<div class="status-ok">‚úÖ Leaflet: Biblioteca cargada</div>`;
                functionsOK++;
                log('Leaflet: Biblioteca OK', 'success');
            } else {
                results += `<div class="status-error">‚ùå Leaflet: No encontrado</div>`;
                log('Leaflet: Biblioteca FALTANTE', 'error');
            }

            // Test MilSymbol
            totalFunctions++;
            if (typeof ms !== 'undefined') {
                results += `<div class="status-ok">‚úÖ MilSymbol: Biblioteca cargada</div>`;
                functionsOK++;
                log('MilSymbol: Biblioteca OK', 'success');
            } else {
                results += `<div class="status-error">‚ùå MilSymbol: No encontrado</div>`;
                log('MilSymbol: Biblioteca FALTANTE', 'error');
            }

            // Test D3
            totalFunctions++;
            if (typeof d3 !== 'undefined') {
                results += `<div class="status-ok">‚úÖ D3.js: Biblioteca cargada</div>`;
                functionsOK++;
                log('D3.js: Biblioteca OK', 'success');
            } else {
                results += `<div class="status-error">‚ùå D3.js: No encontrado</div>`;
                log('D3.js: Biblioteca FALTANTE', 'error');
            }

            results += `<div class="status-${functionsOK === totalFunctions ? 'ok' : 'warning'}">
                üìä Funcionalidad: ${functionsOK}/${totalFunctions} componentes OK
            </div>`;

            resultContainer.innerHTML = results;
            
            testsCompleted = totalTests;
            updateProgress();
            
            log(`Test funcional completado: ${functionsOK}/${totalFunctions} componentes OK`, 
                functionsOK === totalFunctions ? 'success' : 'warning');
        }

        function clearLog() {
            logContent = '';
            document.getElementById('verificationLog').textContent = '';
            log('Log limpiado', 'info');
        }

        function downloadReport() {
            const report = {
                timestamp: new Date().toISOString(),
                url: window.location.href,
                userAgent: navigator.userAgent,
                log: logContent,
                status: testsCompleted === totalTests ? 'COMPLETO' : 'INCOMPLETO'
            };
            
            const blob = new Blob([JSON.stringify(report, null, 2)], 
                                  { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `verificacion_maira_${new Date().getTime()}.json`;
            a.click();
            
            URL.revokeObjectURL(url);
            log('Reporte de verificaci√≥n descargado', 'success');
        }

        function openPlaneamiento() {
            window.open('/planeamiento.html', '_blank');
            log('Abriendo Planeamiento...', 'info');
        }

        function openJuegoGuerra() {
            window.open('/juegodeguerra.html', '_blank');
            log('Abriendo Juego de Guerra...', 'info');
        }

        function openDiagnostico() {
            window.open('/diagnostico_servidor.html', '_blank');
            log('Abriendo Diagn√≥stico...', 'info');
        }

        async function runFullAudit() {
            log('üöÄ Iniciando auditor√≠a completa...', 'info');
            testsCompleted = 0;
            updateProgress();
            
            await testCriticalFiles();
            await new Promise(resolve => setTimeout(resolve, 1000));
            await testGeoData();
            await new Promise(resolve => setTimeout(resolve, 1000));
            await testFunctionality();
            
            log('üéâ Auditor√≠a completa finalizada', 'success');
        }

        // Ejecutar verificaci√≥n autom√°tica al cargar
        window.addEventListener('load', () => {
            log('üöÄ Iniciando verificaci√≥n autom√°tica post-deploy...', 'info');
            setTimeout(runFullAudit, 1000);
        });
    </script>
</body>
</html>
